name: Warm Vercel App

on:
  schedule:
    - cron: '*/10 * * * *'   # roda a cada 10 minutos (UTC)
  workflow_dispatch: {}      # permite rodar manualmente

concurrency:
  group: warm-vercel
  cancel-in-progress: true

jobs:
  warm:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Pingar /api/warm (mant√©m a inst√¢ncia ativa)
        env:
          WARM_URL: ${{ secrets.WARM_URL }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
        run: |
          if [ -z "$WARM_URL" ]; then
            echo "‚ùå WARM_URL n√£o definido."
            exit 1
          fi
          if [ -z "$CRON_SECRET" ]; then
            echo "‚ùå CRON_SECRET n√£o definido."
            exit 1
          fi

          echo "üîÅ Pinging $WARM_URL ..."
          START=$(date +%s%3N) # tempo inicial em milissegundos

          # Envia requisi√ß√£o com timeout e captura status e corpo
          RESPONSE=$(curl -s -w "\n%{http_code}" --max-time 20 \
            -H "Authorization: Bearer $CRON_SECRET" \
            "$WARM_URL" || true)

          BODY=$(echo "$RESPONSE" | head -n -1)
          STATUS=$(echo "$RESPONSE" | tail -n1)
          END=$(date +%s%3N)
          DURATION=$((END - START))

          echo "----------------------------"
          echo "üì° Status HTTP: $STATUS"
          echo "‚è±Ô∏è Tempo de resposta: ${DURATION}ms"
          echo "----------------------------"
          echo "üßæ Corpo da resposta:"
          echo "$BODY"
          echo "----------------------------"

          if [ "$STATUS" != "200" ]; then
            echo "::warning::O endpoint retornou status $STATUS ‚Äî verifique logs na Vercel."
          else
            echo "::notice::Warm-up OK em ${DURATION}ms"
          fi

          # N√£o falha o job em caso de erro de rede leve
          exit 0
